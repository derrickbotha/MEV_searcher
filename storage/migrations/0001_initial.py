# Generated by Django 3.2.25 on 2025-10-19 11:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DataArchive',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('archive_type', models.CharField(choices=[('transactions', 'Transaction Data'), ('opportunities', 'MEV Opportunities'), ('metrics', 'Performance Metrics'), ('logs', 'System Logs'), ('models', 'ML Models'), ('backups', 'System Backups')], max_length=50)),
                ('name', models.CharField(max_length=200)),
                ('file_path', models.CharField(help_text='Path to archived file', max_length=500)),
                ('original_size_bytes', models.BigIntegerField(help_text='Original data size in bytes')),
                ('compressed_size_bytes', models.BigIntegerField(help_text='Compressed file size in bytes')),
                ('compression_type', models.CharField(choices=[('none', 'No Compression'), ('gzip', 'GZIP'), ('bz2', 'BZIP2'), ('xz', 'XZ'), ('zip', 'ZIP')], default='gzip', max_length=10)),
                ('storage_class', models.CharField(choices=[('hot', 'Hot Storage'), ('warm', 'Warm Storage'), ('cold', 'Cold Storage')], default='hot', max_length=10)),
                ('storage_location', models.CharField(help_text='Storage location/path', max_length=500)),
                ('date_from', models.DateTimeField(help_text='Start date of archived data')),
                ('date_to', models.DateTimeField(help_text='End date of archived data')),
                ('record_count', models.BigIntegerField(default=0, help_text='Number of records in archive')),
                ('checksum', models.CharField(help_text='File checksum for integrity', max_length=128)),
                ('metadata', models.JSONField(default=dict, help_text='Additional archive metadata')),
                ('archived_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('retention_period_days', models.IntegerField(default=365, help_text='Retention period in days')),
                ('is_encrypted', models.BooleanField(default=False, help_text='Whether archive is encrypted')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether archive integrity is verified')),
            ],
            options={
                'db_table': 'data_archives',
                'ordering': ['-archived_at'],
            },
        ),
        migrations.CreateModel(
            name='StorageQuota',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quota_type', models.CharField(choices=[('user', 'Per User'), ('project', 'Per Project'), ('global', 'Global')], max_length=20)),
                ('name', models.CharField(help_text='Quota name/description', max_length=100)),
                ('max_size_bytes', models.BigIntegerField(help_text='Maximum storage size in bytes')),
                ('max_files', models.IntegerField(default=0, help_text='Maximum number of files (0 = unlimited)')),
                ('current_size_bytes', models.BigIntegerField(default=0, help_text='Current storage usage')),
                ('current_files', models.IntegerField(default=0, help_text='Current number of files')),
                ('is_active', models.BooleanField(default=True)),
                ('warning_threshold_percent', models.FloatField(default=80.0, help_text='Warning threshold percentage')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(blank=True, help_text='Associated user (for user quotas)', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'storage_quotas',
            },
        ),
        migrations.CreateModel(
            name='FileStorage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Original file name', max_length=255)),
                ('file_type', models.CharField(choices=[('model', 'ML Model File'), ('dataset', 'Dataset File'), ('config', 'Configuration File'), ('log', 'Log File'), ('report', 'Report File'), ('backup', 'Backup File'), ('other', 'Other File')], max_length=50)),
                ('file_path', models.CharField(help_text='Storage path', max_length=500)),
                ('file_size_bytes', models.BigIntegerField(help_text='File size in bytes')),
                ('mime_type', models.CharField(blank=True, help_text='MIME type', max_length=100)),
                ('checksum', models.CharField(help_text='File checksum', max_length=128)),
                ('encoding', models.CharField(blank=True, help_text='File encoding', max_length=50)),
                ('metadata', models.JSONField(default=dict, help_text='Additional file metadata')),
                ('storage_class', models.CharField(choices=[('hot', 'Hot Storage'), ('warm', 'Warm Storage'), ('cold', 'Cold Storage')], default='hot', max_length=10)),
                ('is_encrypted', models.BooleanField(default=False)),
                ('encryption_key_id', models.CharField(blank=True, help_text='Encryption key identifier', max_length=100)),
                ('is_public', models.BooleanField(default=False, help_text='Whether file is publicly accessible')),
                ('uploaded_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField(blank=True, help_text='Expiration date', null=True)),
                ('last_accessed_at', models.DateTimeField(blank=True, null=True)),
                ('download_count', models.IntegerField(default=0, help_text='Number of downloads')),
                ('allowed_users', models.ManyToManyField(blank=True, related_name='accessible_files', to=settings.AUTH_USER_MODEL)),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'file_storage',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='DataRetentionPolicy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('data_type', models.CharField(choices=[('transactions', 'Transaction Data'), ('opportunities', 'MEV Opportunities'), ('metrics', 'Performance Metrics'), ('logs', 'System Logs'), ('models', 'ML Models'), ('backups', 'System Backups'), ('files', 'Uploaded Files')], max_length=50)),
                ('retention_period', models.IntegerField(help_text='Retention period value')),
                ('retention_unit', models.CharField(choices=[('days', 'Days'), ('weeks', 'Weeks'), ('months', 'Months'), ('years', 'Years')], default='days', max_length=10)),
                ('hot_storage_days', models.IntegerField(default=30, help_text='Days to keep in hot storage')),
                ('warm_storage_days', models.IntegerField(default=365, help_text='Days to keep in warm storage')),
                ('auto_archive', models.BooleanField(default=True, help_text='Automatically archive old data')),
                ('compression_enabled', models.BooleanField(default=True, help_text='Compress archived data')),
                ('encryption_enabled', models.BooleanField(default=True, help_text='Encrypt archived data')),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'data_retention_policies',
                'ordering': ['data_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DataExport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Export job name', max_length=200)),
                ('export_type', models.CharField(choices=[('csv', 'CSV Export'), ('json', 'JSON Export'), ('parquet', 'Parquet Export'), ('excel', 'Excel Export')], max_length=20)),
                ('config', models.JSONField(default=dict, help_text='Export configuration (filters, columns, etc.)')),
                ('data_source', models.CharField(help_text='Source of data to export', max_length=100)),
                ('date_from', models.DateTimeField(blank=True, null=True)),
                ('date_to', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('progress_percent', models.FloatField(default=0.0, help_text='Export progress (0-100)')),
                ('file_path', models.CharField(blank=True, help_text='Path to exported file', max_length=500)),
                ('file_size_bytes', models.BigIntegerField(default=0, help_text='Size of exported file')),
                ('record_count', models.IntegerField(default=0, help_text='Number of records exported')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if export failed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('requested_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'data_exports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='dataarchive',
            index=models.Index(fields=['archive_type'], name='data_archiv_archive_a5d2a5_idx'),
        ),
        migrations.AddIndex(
            model_name='dataarchive',
            index=models.Index(fields=['storage_class'], name='data_archiv_storage_114c14_idx'),
        ),
        migrations.AddIndex(
            model_name='dataarchive',
            index=models.Index(fields=['date_from', 'date_to'], name='data_archiv_date_fr_b8df48_idx'),
        ),
        migrations.AddIndex(
            model_name='dataarchive',
            index=models.Index(fields=['archived_at'], name='data_archiv_archive_9c3c92_idx'),
        ),
        migrations.AddIndex(
            model_name='storagequota',
            index=models.Index(fields=['quota_type'], name='storage_quo_quota_t_19832e_idx'),
        ),
        migrations.AddIndex(
            model_name='storagequota',
            index=models.Index(fields=['is_active'], name='storage_quo_is_acti_acd09c_idx'),
        ),
        migrations.AddIndex(
            model_name='filestorage',
            index=models.Index(fields=['file_type'], name='file_storag_file_ty_45e974_idx'),
        ),
        migrations.AddIndex(
            model_name='filestorage',
            index=models.Index(fields=['storage_class'], name='file_storag_storage_8db265_idx'),
        ),
        migrations.AddIndex(
            model_name='filestorage',
            index=models.Index(fields=['uploaded_at'], name='file_storag_uploade_771ac2_idx'),
        ),
        migrations.AddIndex(
            model_name='filestorage',
            index=models.Index(fields=['expires_at'], name='file_storag_expires_94b236_idx'),
        ),
        migrations.AddIndex(
            model_name='dataretentionpolicy',
            index=models.Index(fields=['data_type'], name='data_retent_data_ty_de1780_idx'),
        ),
        migrations.AddIndex(
            model_name='dataretentionpolicy',
            index=models.Index(fields=['is_active'], name='data_retent_is_acti_24538e_idx'),
        ),
        migrations.AddIndex(
            model_name='dataexport',
            index=models.Index(fields=['status'], name='data_export_status_929f46_idx'),
        ),
        migrations.AddIndex(
            model_name='dataexport',
            index=models.Index(fields=['export_type'], name='data_export_export__8e58e4_idx'),
        ),
        migrations.AddIndex(
            model_name='dataexport',
            index=models.Index(fields=['created_at'], name='data_export_created_a07408_idx'),
        ),
    ]
