version: '3.8'

# ==========================================
# Production MEV Searcher Deployment
# Enterprise-Grade with Monitoring & Security
# ==========================================

services:
  # ==========================================
  # MEV Searcher Bot (Main Application)
  # ==========================================
  mev-searcher:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: mev-searcher:latest
    container_name: mev-searcher-prod
    restart: unless-stopped

    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /app/tmp:noexec,nosuid,size=100m
      - /tmp:noexec,nosuid,size=50m

    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

    # Environment configuration
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
      - PORT=8080
      - METRICS_PORT=9090

    # Networking
    ports:
      - "8080:8080"   # Main API
      - "9090:9090"   # Metrics
    networks:
      - mev-network

    # Volumes for persistent data
    volumes:
      - mev-logs:/app/logs:rw
      - mev-data:/app/data:rw

    # Health checks
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

    # Dependencies
    depends_on:
      - postgres
      - redis
      - prometheus

    # Labels for orchestration
    labels:
      - "com.mev.service=core"
      - "com.mev.version=1.0.0"
      - "com.mev.security=high"

  # ==========================================
  # PostgreSQL Database
  # ==========================================
  postgres:
    image: postgres:15-alpine
    container_name: mev-postgres
    restart: unless-stopped

    # Security
    security_opt:
      - no-new-privileges:true

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

    environment:
      - POSTGRES_DB=mev_searcher
      - POSTGRES_USER=mev_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256

    # Networking
    networks:
      - mev-network

    # Volumes
    volumes:
      - postgres-data:/var/lib/postgresql/data:rw
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro

    # Health checks
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mev_user -d mev_searcher"]
      interval: 30s
      timeout: 10s
      retries: 3

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ==========================================
  # Redis Cache
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: mev-redis
    restart: unless-stopped

    # Security
    security_opt:
      - no-new-privileges:true

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 300
      --save 900 1
      --save 300 10
      --save 60 10000

    # Networking
    networks:
      - mev-network

    # Volumes
    volumes:
      - redis-data:/data:rw

    # Health checks
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ==========================================
  # Prometheus Monitoring
  # ==========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: mev-prometheus
    restart: unless-stopped

    # Security
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

    # Networking
    ports:
      - "9090:9090"
    networks:
      - mev-network

    # Configuration
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus:rw

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

    # Health checks
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ==========================================
  # Grafana Dashboard
  # ==========================================
  grafana:
    image: grafana/grafana:latest
    container_name: mev-grafana
    restart: unless-stopped

    # Security
    security_opt:
      - no-new-privileges:true
    user: "472:472"

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel

    # Networking
    ports:
      - "3000:3000"
    networks:
      - mev-network

    # Volumes
    volumes:
      - grafana-data:/var/lib/grafana:rw
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro

    # Health checks
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

    # Dependencies
    depends_on:
      - prometheus

  # ==========================================
  # Nginx Reverse Proxy (Optional)
  # ==========================================
  nginx:
    image: nginx:alpine
    container_name: mev-nginx
    restart: unless-stopped

    # Security
    security_opt:
      - no-new-privileges:true

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

    # Networking
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mev-network

    # Configuration
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx:rw

    # Health checks
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3

    # Dependencies
    depends_on:
      - mev-searcher
      - grafana

# ==========================================
# Networks
# ==========================================
networks:
  mev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ==========================================
# Volumes
# ==========================================
volumes:
  mev-logs:
    driver: local
  mev-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local