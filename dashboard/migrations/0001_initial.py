# Generated by Django 3.2.25 on 2025-10-19 11:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DashboardMetric',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('metric_name', models.CharField(max_length=100)),
                ('metric_type', models.CharField(choices=[('tps', 'Transactions Per Second'), ('mempool_size', 'Mempool Size'), ('gas_price', 'Average Gas Price'), ('profit', 'Total Profit'), ('opportunities', 'MEV Opportunities'), ('success_rate', 'Success Rate')], max_length=50)),
                ('value', models.DecimalField(decimal_places=10, max_digits=20)),
                ('unit', models.CharField(blank=True, help_text='Unit of measurement', max_length=20)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('tags', models.JSONField(default=dict, help_text='Additional metric tags')),
            ],
            options={
                'db_table': 'dashboard_metrics',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='MEVOpportunity',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('opportunity_type', models.CharField(choices=[('arbitrage', 'Arbitrage'), ('sandwich', 'Sandwich Attack'), ('liquidation', 'Liquidation'), ('frontrun', 'Front-running'), ('backrun', 'Back-running')], max_length=50)),
                ('strategy_used', models.CharField(help_text='Strategy that detected this opportunity', max_length=100)),
                ('profit_lamports', models.BigIntegerField(help_text='Profit in lamports')),
                ('gas_used', models.BigIntegerField(help_text='Gas used for the transaction')),
                ('detected_at', models.DateTimeField(help_text='When opportunity was detected')),
                ('executed_at', models.DateTimeField(blank=True, help_text='When opportunity was executed', null=True)),
                ('success', models.BooleanField(default=False, help_text='Whether execution was successful')),
                ('metadata', models.JSONField(default=dict, help_text='Additional opportunity metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'mev_opportunities',
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='Strategy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('strategy_type', models.CharField(choices=[('sandwich', 'Sandwich Attack'), ('arbitrage', 'Arbitrage'), ('liquidation', 'Liquidation'), ('custom', 'Custom Strategy')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('config', models.JSONField(default=dict, help_text='Strategy configuration parameters')),
                ('is_active', models.BooleanField(default=True)),
                ('total_opportunities', models.IntegerField(default=0)),
                ('successful_opportunities', models.IntegerField(default=0)),
                ('total_profit_lamports', models.BigIntegerField(default=0)),
                ('total_gas_used', models.BigIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'strategies',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('signature', models.CharField(help_text='Solana transaction signature', max_length=88, unique=True)),
                ('slot', models.BigIntegerField(help_text='Solana slot number')),
                ('block_time', models.DateTimeField(blank=True, help_text='Block timestamp', null=True)),
                ('raw_data', models.JSONField(help_text='Raw transaction data as JSON')),
                ('processed_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When transaction was processed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'transactions',
                'ordering': ['-block_time'],
            },
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['slot'], name='transaction_slot_a4e7b1_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['block_time'], name='transaction_block_t_ecdaeb_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['processed_at'], name='transaction_process_874789_idx'),
        ),
        migrations.AddField(
            model_name='strategy',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mevopportunity',
            name='transaction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mev_opportunities', to='dashboard.transaction'),
        ),
        migrations.AddIndex(
            model_name='dashboardmetric',
            index=models.Index(fields=['metric_name', 'timestamp'], name='dashboard_m_metric__384614_idx'),
        ),
        migrations.AddIndex(
            model_name='dashboardmetric',
            index=models.Index(fields=['metric_type'], name='dashboard_m_metric__af63a5_idx'),
        ),
        migrations.AddIndex(
            model_name='dashboardmetric',
            index=models.Index(fields=['timestamp'], name='dashboard_m_timesta_e9e32d_idx'),
        ),
        migrations.AddIndex(
            model_name='mevopportunity',
            index=models.Index(fields=['opportunity_type', 'detected_at'], name='mev_opportu_opportu_d38442_idx'),
        ),
        migrations.AddIndex(
            model_name='mevopportunity',
            index=models.Index(fields=['strategy_used'], name='mev_opportu_strateg_d651e8_idx'),
        ),
        migrations.AddIndex(
            model_name='mevopportunity',
            index=models.Index(fields=['success'], name='mev_opportu_success_a7d7df_idx'),
        ),
        migrations.AddIndex(
            model_name='mevopportunity',
            index=models.Index(fields=['detected_at'], name='mev_opportu_detecte_bc65fa_idx'),
        ),
    ]
