# Generated by Django 3.2.25 on 2025-10-19 11:54

from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('backup_type', models.CharField(choices=[('database', 'Database Backup'), ('model', 'ML Model Backup'), ('config', 'Configuration Backup'), ('logs', 'Logs Backup'), ('full', 'Full System Backup')], max_length=50)),
                ('name', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('file_path', models.CharField(blank=True, help_text='Path to backup file', max_length=500)),
                ('file_size_bytes', models.BigIntegerField(default=0, help_text='Size of backup file')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('checksum', models.CharField(blank=True, help_text='Backup file checksum', max_length=128)),
                ('verified_at', models.DateTimeField(blank=True, help_text='When backup was last verified', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if backup failed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'backups',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Incident',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('status', models.CharField(choices=[('investigating', 'Investigating'), ('identified', 'Identified'), ('monitoring', 'Monitoring'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='investigating', max_length=20)),
                ('affected_components', models.JSONField(default=list, help_text='List of affected components')),
                ('impact_description', models.TextField(blank=True, help_text='Description of impact')),
                ('affected_users', models.IntegerField(default=0, help_text='Number of affected users')),
                ('detected_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('root_cause', models.TextField(blank=True, help_text='Root cause analysis')),
                ('resolution', models.TextField(blank=True, help_text='Resolution steps taken')),
                ('preventive_measures', models.TextField(blank=True, help_text='Preventive measures implemented')),
                ('public_communication', models.TextField(blank=True, help_text='Public communication about incident')),
                ('internal_notes', models.TextField(blank=True, help_text='Internal notes and investigation details')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'incidents',
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='LogEntry',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('level', models.CharField(choices=[('DEBUG', 'Debug'), ('INFO', 'Info'), ('WARNING', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], max_length=10)),
                ('component', models.CharField(choices=[('web', 'Web Application'), ('websocket', 'WebSocket'), ('celery', 'Celery Worker'), ('cpp_engine', 'C++ Engine'), ('ml_service', 'ML Service'), ('database', 'Database'), ('redis', 'Redis')], max_length=50)),
                ('message', models.TextField()),
                ('logger_name', models.CharField(blank=True, max_length=100)),
                ('function_name', models.CharField(blank=True, max_length=100)),
                ('line_number', models.IntegerField(blank=True, null=True)),
                ('extra_data', models.JSONField(default=dict, help_text='Additional log context')),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('session_id', models.CharField(blank=True, max_length=100)),
                ('request_id', models.UUIDField(blank=True, null=True)),
                ('request_method', models.CharField(blank=True, max_length=10)),
                ('request_path', models.CharField(blank=True, max_length=500)),
                ('response_status', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'log_entries',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('component', models.CharField(help_text='Component being profiled', max_length=100)),
                ('function_name', models.CharField(help_text='Function being profiled', max_length=200)),
                ('operation', models.CharField(help_text='Operation being performed', max_length=100)),
                ('execution_time_ms', models.FloatField(help_text='Execution time in milliseconds')),
                ('cpu_time_ms', models.FloatField(blank=True, help_text='CPU time used', null=True)),
                ('memory_used_bytes', models.BigIntegerField(blank=True, help_text='Memory used in bytes', null=True)),
                ('input_size', models.IntegerField(blank=True, help_text='Size of input data', null=True)),
                ('output_size', models.IntegerField(blank=True, help_text='Size of output data', null=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional profiling metadata')),
            ],
            options={
                'db_table': 'performance_profiles',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SystemHealth',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('component', models.CharField(choices=[('database', 'Database'), ('redis', 'Redis Cache'), ('web_server', 'Web Server'), ('websocket', 'WebSocket Server'), ('celery', 'Celery Worker'), ('cpp_engine', 'C++ MEV Engine'), ('ml_service', 'ML Service')], max_length=50)),
                ('status', models.CharField(choices=[('healthy', 'Healthy'), ('degraded', 'Degraded'), ('unhealthy', 'Unhealthy'), ('down', 'Down')], default='healthy', max_length=20)),
                ('response_time_ms', models.FloatField(blank=True, help_text='Response time in milliseconds', null=True)),
                ('cpu_usage_percent', models.FloatField(blank=True, help_text='CPU usage percentage', null=True)),
                ('memory_usage_percent', models.FloatField(blank=True, help_text='Memory usage percentage', null=True)),
                ('disk_usage_percent', models.FloatField(blank=True, help_text='Disk usage percentage', null=True)),
                ('active_connections', models.IntegerField(default=0, help_text='Number of active connections')),
                ('queue_size', models.IntegerField(default=0, help_text='Queue size for processing')),
                ('error_count', models.IntegerField(default=0, help_text='Number of errors in the last check')),
                ('last_error_message', models.TextField(blank=True, help_text='Last error message')),
                ('metadata', models.JSONField(default=dict, help_text='Additional health check metadata')),
            ],
            options={
                'db_table': 'system_health',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='systemhealth',
            index=models.Index(fields=['component', 'timestamp'], name='system_heal_compone_b16d89_idx'),
        ),
        migrations.AddIndex(
            model_name='systemhealth',
            index=models.Index(fields=['status'], name='system_heal_status_0a0a9b_idx'),
        ),
        migrations.AddIndex(
            model_name='systemhealth',
            index=models.Index(fields=['timestamp'], name='system_heal_timesta_925ff9_idx'),
        ),
        migrations.AddIndex(
            model_name='performanceprofile',
            index=models.Index(fields=['component'], name='performance_compone_037c27_idx'),
        ),
        migrations.AddIndex(
            model_name='performanceprofile',
            index=models.Index(fields=['function_name'], name='performance_functio_3264ce_idx'),
        ),
        migrations.AddIndex(
            model_name='performanceprofile',
            index=models.Index(fields=['operation'], name='performance_operati_a10451_idx'),
        ),
        migrations.AddIndex(
            model_name='performanceprofile',
            index=models.Index(fields=['timestamp'], name='performance_timesta_71f2e3_idx'),
        ),
        migrations.AddIndex(
            model_name='logentry',
            index=models.Index(fields=['level'], name='log_entries_level_c2561b_idx'),
        ),
        migrations.AddIndex(
            model_name='logentry',
            index=models.Index(fields=['component'], name='log_entries_compone_8d0a78_idx'),
        ),
        migrations.AddIndex(
            model_name='logentry',
            index=models.Index(fields=['timestamp'], name='log_entries_timesta_93910a_idx'),
        ),
        migrations.AddIndex(
            model_name='logentry',
            index=models.Index(fields=['request_id'], name='log_entries_request_07fb37_idx'),
        ),
        migrations.AddIndex(
            model_name='incident',
            index=models.Index(fields=['severity'], name='incidents_severit_667686_idx'),
        ),
        migrations.AddIndex(
            model_name='incident',
            index=models.Index(fields=['status'], name='incidents_status_9db31b_idx'),
        ),
        migrations.AddIndex(
            model_name='incident',
            index=models.Index(fields=['detected_at'], name='incidents_detecte_161fd3_idx'),
        ),
        migrations.AddIndex(
            model_name='backup',
            index=models.Index(fields=['backup_type'], name='backups_backup__1988f1_idx'),
        ),
        migrations.AddIndex(
            model_name='backup',
            index=models.Index(fields=['status'], name='backups_status_c02d44_idx'),
        ),
        migrations.AddIndex(
            model_name='backup',
            index=models.Index(fields=['created_at'], name='backups_created_f8ef12_idx'),
        ),
    ]
