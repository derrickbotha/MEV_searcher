# Generated by Django 3.2.25 on 2025-10-19 11:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('dashboard', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MLModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('model_type', models.CharField(choices=[('opportunity_detection', 'Opportunity Detection'), ('profit_estimation', 'Profit Estimation'), ('strategy_optimization', 'Strategy Optimization'), ('risk_assessment', 'Risk Assessment')], max_length=50)),
                ('algorithm', models.CharField(choices=[('xgboost', 'XGBoost'), ('lightgbm', 'LightGBM'), ('tensorflow', 'TensorFlow'), ('pytorch', 'PyTorch'), ('sklearn', 'Scikit-learn')], max_length=50)),
                ('version', models.CharField(help_text='Model version (e.g., v1.0.0)', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('config', models.JSONField(default=dict, help_text='Model hyperparameters and configuration')),
                ('feature_names', models.JSONField(default=list, help_text='List of feature names used by the model')),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('precision', models.FloatField(blank=True, null=True)),
                ('recall', models.FloatField(blank=True, null=True)),
                ('f1_score', models.FloatField(blank=True, null=True)),
                ('auc_roc', models.FloatField(blank=True, null=True)),
                ('training_started_at', models.DateTimeField(blank=True, null=True)),
                ('training_completed_at', models.DateTimeField(blank=True, null=True)),
                ('training_duration', models.DurationField(blank=True, null=True)),
                ('model_path', models.CharField(blank=True, help_text='Path to saved model file', max_length=500)),
                ('model_size_bytes', models.BigIntegerField(default=0, help_text='Size of model file in bytes')),
                ('status', models.CharField(choices=[('training', 'Training'), ('completed', 'Completed'), ('failed', 'Failed'), ('deployed', 'Deployed'), ('retired', 'Retired')], default='training', max_length=20)),
                ('is_active', models.BooleanField(default=False, help_text='Whether this model is currently active')),
                ('deployed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('parent_model', models.ForeignKey(blank=True, help_text='Parent model for versioning', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_models', to='ml_training.mlmodel')),
            ],
            options={
                'db_table': 'ml_models',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrainingRun',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('config', models.JSONField(default=dict, help_text='Training configuration and hyperparameters')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('progress_percentage', models.FloatField(default=0.0, help_text='Training progress (0-100)')),
                ('train_loss', models.JSONField(default=list, help_text='Training loss over epochs')),
                ('val_loss', models.JSONField(default=list, help_text='Validation loss over epochs')),
                ('train_metrics', models.JSONField(default=dict, help_text='Training metrics')),
                ('val_metrics', models.JSONField(default=dict, help_text='Validation metrics')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('final_model_path', models.CharField(blank=True, help_text='Path to final trained model', max_length=500)),
                ('best_checkpoint_path', models.CharField(blank=True, help_text='Path to best checkpoint', max_length=500)),
                ('error_message', models.TextField(blank=True, help_text='Error message if training failed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('initiated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_runs', to='ml_training.mlmodel')),
            ],
            options={
                'db_table': 'training_runs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ModelEvaluation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('evaluation_type', models.CharField(help_text='Type of evaluation (e.g., cross_validation, holdout)', max_length=50)),
                ('dataset_info', models.JSONField(default=dict, help_text='Information about evaluation dataset')),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('precision', models.FloatField(blank=True, null=True)),
                ('recall', models.FloatField(blank=True, null=True)),
                ('f1_score', models.FloatField(blank=True, null=True)),
                ('auc_roc', models.FloatField(blank=True, null=True)),
                ('auc_pr', models.FloatField(blank=True, null=True)),
                ('confusion_matrix', models.JSONField(default=dict, help_text='Confusion matrix')),
                ('classification_report', models.JSONField(default=dict, help_text='Detailed classification report')),
                ('feature_importance', models.JSONField(default=dict, help_text='Feature importance scores')),
                ('evaluated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='ml_training.mlmodel')),
            ],
            options={
                'db_table': 'model_evaluations',
                'ordering': ['-evaluated_at'],
            },
        ),
        migrations.CreateModel(
            name='MLTrainingSample',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('features', models.JSONField(help_text='Extracted features for ML model')),
                ('labels', models.JSONField(default=dict, help_text='Target variables/labels')),
                ('model_version', models.CharField(help_text='Version of model this sample is for', max_length=50)),
                ('sample_weight', models.FloatField(default=1.0, help_text='Sample weight for training')),
                ('is_validation', models.BooleanField(default=False, help_text='Whether this is a validation sample')),
                ('is_test', models.BooleanField(default=False, help_text='Whether this is a test sample')),
                ('processed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('feature_extraction_version', models.CharField(help_text='Version of feature extraction logic', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ml_samples', to='dashboard.transaction')),
            ],
            options={
                'db_table': 'ml_training_samples',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ABLTest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('traffic_split', models.FloatField(default=0.5, help_text='Traffic split (0.0-1.0) for model A')),
                ('test_duration_days', models.IntegerField(default=7, help_text='Duration of test in days')),
                ('min_sample_size', models.IntegerField(default=1000, help_text='Minimum sample size required')),
                ('status', models.CharField(choices=[('running', 'Running'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='running', max_length=20)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('model_a_performance', models.JSONField(default=dict, help_text='Performance metrics for model A')),
                ('model_b_performance', models.JSONField(default=dict, help_text='Performance metrics for model B')),
                ('winner', models.CharField(blank=True, choices=[('A', 'Model A'), ('B', 'Model B'), ('tie', 'Tie')], max_length=10)),
                ('confidence_level', models.FloatField(blank=True, help_text='Statistical confidence level', null=True)),
                ('p_value', models.FloatField(blank=True, help_text='P-value for statistical test', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('model_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ab_tests_as_a', to='ml_training.mlmodel')),
                ('model_b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ab_tests_as_b', to='ml_training.mlmodel')),
            ],
            options={
                'db_table': 'ab_tests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='trainingrun',
            index=models.Index(fields=['status'], name='training_ru_status_07d80c_idx'),
        ),
        migrations.AddIndex(
            model_name='trainingrun',
            index=models.Index(fields=['started_at'], name='training_ru_started_a8ab9e_idx'),
        ),
        migrations.AddIndex(
            model_name='trainingrun',
            index=models.Index(fields=['completed_at'], name='training_ru_complet_397c93_idx'),
        ),
        migrations.AddIndex(
            model_name='modelevaluation',
            index=models.Index(fields=['model', 'evaluated_at'], name='model_evalu_model_i_51d797_idx'),
        ),
        migrations.AddIndex(
            model_name='modelevaluation',
            index=models.Index(fields=['evaluation_type'], name='model_evalu_evaluat_37a0bf_idx'),
        ),
        migrations.AddIndex(
            model_name='mltrainingsample',
            index=models.Index(fields=['model_version'], name='ml_training_model_v_600ae3_idx'),
        ),
        migrations.AddIndex(
            model_name='mltrainingsample',
            index=models.Index(fields=['is_validation'], name='ml_training_is_vali_b23f5d_idx'),
        ),
        migrations.AddIndex(
            model_name='mltrainingsample',
            index=models.Index(fields=['is_test'], name='ml_training_is_test_1c941d_idx'),
        ),
        migrations.AddIndex(
            model_name='mltrainingsample',
            index=models.Index(fields=['processed_at'], name='ml_training_process_3b0847_idx'),
        ),
        migrations.AddIndex(
            model_name='mlmodel',
            index=models.Index(fields=['model_type', 'status'], name='ml_models_model_t_426c2a_idx'),
        ),
        migrations.AddIndex(
            model_name='mlmodel',
            index=models.Index(fields=['algorithm'], name='ml_models_algorit_e8f4a3_idx'),
        ),
        migrations.AddIndex(
            model_name='mlmodel',
            index=models.Index(fields=['is_active'], name='ml_models_is_acti_714d25_idx'),
        ),
        migrations.AddIndex(
            model_name='mlmodel',
            index=models.Index(fields=['created_at'], name='ml_models_created_d43da9_idx'),
        ),
    ]
